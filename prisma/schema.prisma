// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  STAFF
  TEACHER
  STUDENT
  PARENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  LATE
  MISSING
}

// Core User model
model User {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String?
  password    String
  role        UserRole
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  student     Student?
  parent      Parent?
  teacher     Teacher?
  staff       Staff?

  // One-to-many relations
  announcements Announcement[]
  chatSupports  ChatSupport[]

  @@map("users")
}

// Student model
model Student {
  id           String @id @default(cuid())
  userId       String @unique
  gradeLevelId String
  classId      String?

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  gradeLevel  GradeLevel  @relation(fields: [gradeLevelId], references: [id])
  class       Class?      @relation(fields: [classId], references: [id])

  // One-to-many relations
  grades      Grade[]
  attendances Attendance[]
  submissions Submission[]
  payments    Payment[]

  // Many-to-many relations
  parents     ParentStudent[]

  @@map("students")
}

// Parent model
model Parent {
  id     String @id @default(cuid())
  userId String @unique

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Many-to-many relations
  students ParentStudent[]
  payments Payment[]

  @@map("parents")
}

// Parent-Student relationship (many-to-many)
model ParentStudent {
  id        String @id @default(cuid())
  parentId  String
  studentId String

  // Relations
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([parentId, studentId])
  @@map("parent_students")
}

// Teacher model
model Teacher {
  id     String @id @default(cuid())
  userId String @unique

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // One-to-many relations
  classes     Class[]
  materials   Material[]

  @@map("teachers")
}

// Staff model
model Staff {
  id     String @id @default(cuid())
  userId String @unique

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // No direct relations to other models

  @@map("staff")
}

// Grade Level model
model GradeLevel {
  id          String @id @default(cuid())
  name        String
  description String?

  // One-to-many relations
  students Student[]
  subjects Subject[]

  @@map("grade_levels")
}

// Subject model
model Subject {
  id           String @id @default(cuid())
  name         String
  description  String?
  gradeLevelId String

  // Relations
  gradeLevel GradeLevel @relation(fields: [gradeLevelId], references: [id])

  // One-to-many relations
  classes   Class[]
  materials Material[]

  @@map("subjects")
}

// Class model
model Class {
  id         String @id @default(cuid())
  subjectId  String
  teacherId  String
  schedule   String
  roomNumber String?

  // Relations
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  // One-to-many relations
  students    Student[]
  grades      Grade[]
  attendances Attendance[]

  @@map("classes")
}

// Grade model
model Grade {
  id        String @id @default(cuid())
  studentId String
  classId   String
  term      String
  score     Float

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId, term])
  @@map("grades")
}

// Material model
model Material {
  id          String @id @default(cuid())
  title       String
  description String?
  fileUrl     String
  subjectId   String
  createdBy   String

  // Relations
  subject Subject @relation(fields: [subjectId], references: [id])
  teacher Teacher @relation(fields: [createdBy], references: [id])

  // One-to-many relations
  submissions Submission[]

  @@map("materials")
}

// Submission model
model Submission {
  id             String           @id @default(cuid())
  studentId      String
  materialId     String
  submissionDate DateTime         @default(now())
  status         SubmissionStatus @default(SUBMITTED)

  // Relations
  student  Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@unique([studentId, materialId])
  @@map("submissions")
}

// Attendance model
model Attendance {
  id        String           @id @default(cuid())
  studentId String
  classId   String
  date      DateTime
  status    AttendanceStatus

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId, date])
  @@map("attendances")
}

// Announcement model
model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  createdBy String

  // Relations
  user User @relation(fields: [createdBy], references: [id])

  @@map("announcements")
}

// Chat Support model
model ChatSupport {
  id        String   @id @default(cuid())
  userId    String
  message   String
  timestamp DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_supports")
}

// Payment model
model Payment {
  id        String        @id @default(cuid())
  parentId  String
  studentId String
  amount    Float
  method    String
  status    PaymentStatus @default(PENDING)
  timestamp DateTime      @default(now())

  // Relations
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("payments")
}
